<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名前はまだ無い。</title>
  
  <subtitle>NO NAME is Debugon&#39;s Memo...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://debugon.git.io/"/>
  <updated>2017-12-18T21:13:32.122Z</updated>
  <id>http://debugon.git.io/</id>
  
  <author>
    <name>Debugon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Google版ARKit、ARCoreに手を出してみる</title>
    <link href="http://debugon.git.io/Programming/Android/Unity/cjbcp2n06000jckgrfavfksco/"/>
    <id>http://debugon.git.io/Programming/Android/Unity/cjbcp2n06000jckgrfavfksco/</id>
    <published>2017-12-18T16:13:02.000Z</published>
    <updated>2017-12-18T21:13:32.122Z</updated>
    
    <content type="html"><![CDATA[<p>久しぶりの更新になります！<br>少し時間を空けるつもりが、思った以上の時間になってしまうなんてことなってしまいました・・・</p><p>つい先日、Googleより<a href="https://twitter.com/projecttango/status/941730801791549440" target="_blank">Tangoサービスの終了</a>が発表されました。</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="en" dir="ltr">We’re turning down support for Tango on March 1, 2018. Thank you to our incredible community of developers who made such progress with Tango over the last three years. We look forward to continuing the journey with you on ARCore. <a href="https://t.co/aYiSUkgyie" target="_blank" rel="external">https://t.co/aYiSUkgyie</a></p>&mdash; Tango (@projecttango) <a href="https://twitter.com/projecttango/status/941730801791549440?ref_src=twsrc%5Etfw" target="_blank" rel="external">2017年12月15日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>正確には前々から終了の告知はなされていたのですが、今回の発表では2018年3月と具体的な日程を提示してきました。<br>今後の開発は<code>ARCore</code>に一本化していくとのことです。</p><p>今回はTangoの終了のお知らせに合わせて発表された、ARCoreのDevelopersPreview2を実機に入れてみたいと思います。（本当はTangoの終了がPreview2の発表に合わせて行われたのですが・・・）</p><h2 id="ARCoreとは"><a href="#ARCoreとは" class="headerlink" title="ARCoreとは"></a>ARCoreとは</h2><p><img src="..\..\..\img\arcore-logo.jpg"><br>ARCoreはApple社のARkitの対抗馬としてGoogleが発表したものであり、スマートフォンの背面カメラ<code>1つ</code>のみを使用してAR体験を提供するSDKです。<br>Tangoと違い<code>3つのカメラ</code>や<code>特殊なセンサー</code>といったハードウェアが不要で、現行のどのスマートフォンでも利用可能というメリットがあります。<br>その半面Tangoよりも空間の認識能力が低く、赤外線による空間深度を取得できないといったデメリットもありますが、ついにTango自体がサポートを終了してしまうこととなります。</p><h3 id="対応端末"><a href="#対応端末" class="headerlink" title="対応端末"></a>対応端末</h3><p><img src="..\..\..\img\arcore-device.png"></p><p>ARCoreは現在開発者向けのSDKがリリースされていますが、対応機種はGoogleが販売をしているGoogle Pixelシリーズと、Samsungが販売しているGalaxy S8のみとなっています。<br>日本国内でPixelシリーズは一般販売されていないのでGalaxy S8を使うか、Pixelを個人輸入するほかありません。</p><h3 id="言語"><a href="#言語" class="headerlink" title="言語"></a>言語</h3><p><img src="..\..\..\img\arcore-lang.png"></p><p>ARCoreはJava, Unity, UnrealEnginで使用でき、Tangoの導入と同じようなガイドが設けられています。<br>今回のアプリも<code>Unity</code>で作っていきます。</p><h2 id="ARCoreを試してみる"><a href="#ARCoreを試してみる" class="headerlink" title="ARCoreを試してみる"></a>ARCoreを試してみる</h2><p>長々とARCoreについて書いたので、そろそろARCoreを動かしてみたいと思います。<br>ちなみにAndroidの設定もろもろは本筋から外れるので省略します。</p><h3 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h3><ul><li>Google Pixel Android8.1</li><li>Unity 2017.3</li><li>ARCore Developers Preview 2</li></ul><h3 id="SDKの入手"><a href="#SDKの入手" class="headerlink" title="SDKの入手"></a>SDKの入手</h3><p>まずはARCoreの<a href="https://developers.google.com/ar/" target="_blank">公式サイト</a>よりUnity向けのARCoreSDKを手に入れましょう。<br>Unityの下にある<code>GET STARTED</code>からガイドページに行くことができます。<br>この記事の執筆時にはUnity 2017.3以上のバージョンが推奨されていました。</p><p><img src="..\..\..\img\arcore-sdk.png"></p><p><code>SDK for Unity</code>をクリックし<code>.unitypackage</code>形式でダウンロードします。<br>次にこのSDKをUnityで作成したプロジェクトにインポートしましょう。</p><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>まずは適当にUnity3Dでプロジェクトを作成します。<br>今回はARCoreDevelopersPreview2という名前にしました。<br>作成後、先ほどダウンロードしたパッケージを<code>Assets &gt; Import Package &gt; Custom Package</code>からインポートしましょう。<br>選択後、何をインポートするか聞かれますが、問題はないと思いますので<code>Import</code>をクリックします。</p><p><img src="..\..\..\img\arcore-import.png"><br>(キャプチャし忘れちゃって、追加された後になってたりします・・・)</p><p>これでUnityのプロジェクトにARCoreのSDKを入れることができました。</p><h3 id="プロジェクトのビルド設定"><a href="#プロジェクトのビルド設定" class="headerlink" title="プロジェクトのビルド設定"></a>プロジェクトのビルド設定</h3><p>忘れないうちにビルド設定を済ませてしまいましょう。<br><code>File&gt;Build Settings...</code>からビルド設定画面を開きます。<br>まずはプラットフォームをAndroidに変更します。<br>Androidを選択し<code>Switch Platform</code>をクリックし、ビルド対象をAndroidに設定します。</p><p><img src="..\..\..\img\arcore-platform.png"></p><p>次に<code>Player Settings...</code>をクリックし、設定画面を開きます。<br>ARCoreを動作させるために以下のような設定をします。<br><code>Other Settings</code>タブから</p><ul><li><code>Multithreaded Rendering</code>のチェックを外す</li><li>Minimum API LevelはAndroid 7.0以上を選択</li><li><del>Target API LevelはAndroid 7.0 か 7.1を選択</del></li><li><font color="Red">Target API Levelは実機のバージョンのSDKをインストールし<code>Automatic</code>に設定</font></li></ul><p><code>XR Settings</code>タブから</p><ul><li><code>ARCore Supported</code>にチェック</li></ul><p>このときAndroid 7.0以上を選択できない場合は、Android SDKからAPI Level 24以上をダウンロードしていないと思いますので一度確認してみてください。</p><p>最後にARCoreのサンプルシーンを読み込むように設定します。<br><code>Assets &gt; GoogleARCore &gt; Examples &gt; HelloAR &gt; Scenes</code>を開き、<code>HelloAR.unity</code>を<code>Scenes In Build</code>にドラッグアンドドロップします。</p><p><img src="..\..\..\img\arcore-examples.png"></p><p>これにてUnity側のプロジェクトの作成・設定は終了となります。<br>実機にインストール・・・と行きたいところですが、端末側にも準備が必要なのでまだ行いません。</p><h2 id="ARCoreシステムアプリをインストールする"><a href="#ARCoreシステムアプリをインストールする" class="headerlink" title="ARCoreシステムアプリをインストールする"></a>ARCoreシステムアプリをインストールする</h2><p>ARCoreを動かす端末側にもARCoreのアプリケーションを導入する必要があります。<br>ARCoreシステムアプリは実機のブラウザからダウンロードしインストールするか、adbコマンドを用いて実機にインストールするかして導入しましょう。</p><p><img src="..\..\..\img\arcore-apk.png"></p><p>今回は前者の方法ででさくっとインストールしました。<br>特に権限の要求とかはなかったと思います。</p><p>これでようやく動作させる環境が整いました。<br>最後にUnityに戻り、ビルドしましょう！</p><h2 id="いざビルド"><a href="#いざビルド" class="headerlink" title="いざビルド"></a>いざビルド</h2><p><code>Build Settings</code>から<code>Build And Run</code>をクリックし、任意の名前の<code>.apk</code>で保存します。<br>うまくいけばビルドが通るはずです。</p><p><img src="..\..\..\img\arcore-error.png"><br>(しまった、PixelってAndrodi 8.1だった・・・)<br>急いでダウンロードします・・・</p><p><img src="..\..\..\img\android-update.png"></p><p>Target API Levelに7.1以上が表示されないので<code>Automatic</code>に変更してビルドします。</p><p><img src="..\..\..\img\arcore-success.png"></p><p>無事にインストールできたようです。</p><h2 id="ARCoreを動かす"><a href="#ARCoreを動かす" class="headerlink" title="ARCoreを動かす"></a>ARCoreを動かす</h2><p>インストールが終わると勝手に起動すると思いますが、起動しなかった場合はインストールアプリの一覧から起動してみてください。<br>私は起動時にカメラの権限だけ求められましたので、許可しています。</p><p><img src="..\..\..\img\arcore-test.png"><br>(適当に手元で動かしたものをスクショしてみました)</p><p>起動すると青い点が点々と現れ平面のスキャンが始まり、平面だと認識すると画面のような線が表示されます。<br>ドロイド君はタップすることでその位置に表示することができました。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>お疲れさまでした！<br>ARKitに対抗してARCoreを出したと一時期は騒がれていましたが、Tangoでできていたことが従来のスマートフォンでもできるようになるというのはすごいと感じます。<br>ARKitはiPhoneの開発環境を持ち合わせていないので試すのは難しいのですが、噂だとARKitよりも平面の検出スピードは速いと聞きます。<br>ARCoreはそろそろ正式リリースされるとのことなので、とても期待が高まりますね！</p><!--<a href="url-hogehoge" target="_blank">URL名</a><div style="text-align: right;">引用元：[name](https://)</div><img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;久しぶりの更新になります！&lt;br&gt;少し時間を空けるつもりが、思った以上の時間になってしまうなんてことなってしまいました・・・&lt;/p&gt;
&lt;p&gt;つい先日、Googleより&lt;a href=&quot;https://twitter.com/projecttango/status/94173
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Android" scheme="http://debugon.git.io/categories/Programming/Android/"/>
    
      <category term="Unity" scheme="http://debugon.git.io/categories/Programming/Android/Unity/"/>
    
    
      <category term="Android" scheme="http://debugon.git.io/tags/Android/"/>
    
      <category term="Unity" scheme="http://debugon.git.io/tags/Unity/"/>
    
      <category term="ARCore" scheme="http://debugon.git.io/tags/ARCore/"/>
    
  </entry>
  
  <entry>
    <title>Unityで話題のTangoを動かしてみる</title>
    <link href="http://debugon.git.io/Programming/Android/Unity/cjbcp2n00000eckgrei8y2w46/"/>
    <id>http://debugon.git.io/Programming/Android/Unity/cjbcp2n00000eckgrei8y2w46/</id>
    <published>2017-10-30T18:41:37.000Z</published>
    <updated>2017-12-18T21:09:27.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="..\..\..\img\tango-home.png"></p><p>つい最近CEATECのお話を聞く機会があり、ARやMR（MixedReality）に力を入れている企業が多いという話をされていました。<br>特にGoogleとMicrosoftが結構プッシュしているようで、GoogleはTangoというAR技術を開発し、MicrosoftはOSレベルでMRの開発キットを機能として盛り込むなどといった動きを見せています。</p><p>私もGoogleTango対応の端末をお借りする機会があったので、試しにUnityでサンプルを動かしてみたいと思います。</p><h2 id="Tangoについて"><a href="#Tangoについて" class="headerlink" title="Tangoについて"></a>Tangoについて</h2><p>Googleの公開しているTangoは3つのカメラと赤外線を用いることで非常に高精度な空間認識を持ち味としているようで、既存の技術とは大きく違って空間の深度というものを採れるようです。<br>赤外線でレイキャストをしているみたいなんですが、詳しくはGoogleが公開しているTangoのPVをご覧になってください。</p><h3 id="対応機種について"><a href="#対応機種について" class="headerlink" title="対応機種について"></a>対応機種について</h3><p><img src="..\..\..\img\tango-device.png"></p><p>現在GoogleTangoに対応している端末は２種のみですが、CEATECを終えた今はTangoの知名度も上がったと思いますので今後に期待しましょう。</p><ol><li>Lenovo Phab 2 Pro</li><li>ASUS ZenFone AR</li></ol><p>どちらも大型のスマートフォン、もといファブレットに近いサイズですね・・・<br>カメラを３つも積んでいるので仕方がないですが、持ち運びや日常利用には結構大きいのではないでしょうか。</p><h2 id="Tangoの導入"><a href="#Tangoの導入" class="headerlink" title="Tangoの導入"></a>Tangoの導入</h2><p>ここからはTangoをUnity環境に導入する手順について説明したいと思います。<br>UnityとAndroidビルドの設定は終わっているとして話を進めます。<br>（近いうちにAndroidのビルド環境の記事を書こうと考えていますので、合わせて読んでいただけると幸いです。）</p><p>手順としては以下の通りになります。</p><ol><li>Tangoの入手</li><li>Tangoのインポート</li><li>Tangoのビルド設定</li></ol><h3 id="1-Tangoの入手"><a href="#1-Tangoの入手" class="headerlink" title="1. Tangoの入手"></a>1. Tangoの入手</h3><p>まず初めにTangoのパッケージを入手しなければいけません。<br>公式サイト右上の<code>デベロッパー</code>から各言語のSDKを選択できます。<br>今回はUnityで作りますのでUnitySDKの詳細から取得しましょう。</p><p><img src="..\..\..\img\tango-unity.jpg"></p><p>詳細から進んでもUnity専用のページではなく似たような画面が出ますので、<code>使ってみる</code>をクリックしてドキュメントに移動します。</p><p><img src="..\..\..\img\tango-howto.png"></p><p>進むと上記のようなページに移動しますが、ここではTangoを動かす際のUnityの設定と必須環境が記載されています。</p><ul><li>API Levelが17以上のAndroid SDK</li><li>Unity5.2.1以降のUnity</li><li>Unity向けのTango SDK</li><li>Google USB Driver</li></ul><p><code>API Lebel...</code>と<code>Tango Unity SDK</code>を除けば、大体はUnityでAndroidアプリをビルドするときに環境が整っていると思います。<br>ページの<code>Tango Unity SDK</code>からダウンロードページに行くことで、ようやくTangoSDKをダウンロードすることができます。</p><p><img src="..\..\..\img\tango-sdk.jpg"></p><p><code>Tango SDK for Unity</code>をクリックして最新のSDKを落としましょう。<br><code>.unitypackage</code>形式でダウンロードされるので、Unityを開いていると自動的に開いているプロジェクトにインポートされます。<br>「このプロジェクトはダメ！」という場合はあらかじめUnityを閉じでおくか、キャンセルしてください。</p><h3 id="2-Tangoのインポート"><a href="#2-Tangoのインポート" class="headerlink" title="2. Tangoのインポート"></a>2. Tangoのインポート</h3><p>TangoSDKを落としましたら、Unityで3Dプロジェクトを新規作成してください。<br>今回はUnity2017.2で作ってみます。（Unityの導入記事もそれで書いていましたので）<br>プロジェクト名は<code>hoge</code>で作成しました。<br>開発画面に来ましたら、さっそく先ほどダウンロードしたパッケージをインポートします。<br><code>Assets &gt; Import Package &gt; Custom Package...</code>から<code>.unitypackage</code>形式のパッケージをインポートできます。</p><p><img src="..\..\..\img\unity-import.jpg"></p><p>パッケージを開くとインポートされるリストが表示されますので、問題がないようでしたら<code>Import</code>をクリックしてインポートしてしまいましょう。<br>インポートが終わると画面下部のAssets以下にいろいろ追加されますので、一度確認しましょう。</p><p><img src="..\..\..\img\unity-tango-files.png"><br>このようになっているはずです。</p><h3 id="3-Tangoのビルド設定"><a href="#3-Tangoのビルド設定" class="headerlink" title="3. Tangoのビルド設定"></a>3. Tangoのビルド設定</h3><p>Tangoのアプリケーションは要件としてAndroid4.2以降でなければいけないので、Androidのビルド設定を変更する必要があります。<br><code>File&gt;Build Settings...</code>からビルド対象の設定をします。<br>まずはPlatformの箇所で<code>Android</code>をダブルクリックか選択してください。（ダブルクリックするとその時点でビルド対象がAndroidに変更されます。）<br>次に<code>Player Settings...</code>をクリックし、ビルドの設定を変更します。<br><code>Other Settings</code>を選択し、<code>Minimum API Level</code>の箇所を<code>Android 4.2 &#39;Jelly Bean&#39; (APK level 17)</code>を選びましょう。</p><p><img src="..\..\..\img\unity-android-setting.jpg"></p><p>またここで<code>Multithread Rendering</code>のチェックを外しておきます。<br>ここにチェックが入っていると、アプリケーションでカメラの映像を正しく表示できなくなるからです。<br>ついでに<code>Package Name</code>の設定も済ませていきましょう。</p><p><img src="..\..\..\img\unity-tango-setting.jpg"></p><p>最後にプラットフォームの変更をしていない場合は<code>Switch Platform</code>をクリックして、ビルド対象をAndroidに変更します。<br>以上で設定は終了ですが、Build Settingsの画面はそのまま開いておいてください。</p><h2 id="Tangoのサンプルを動かす"><a href="#Tangoのサンプルを動かす" class="headerlink" title="Tangoのサンプルを動かす"></a>Tangoのサンプルを動かす</h2><p>実際にTangoのサンプルを動かしてみます。<br><code>Assets &gt; TangoSDK &gt; Examples &gt; Scenes</code>を開き、サンプルのシーンファイルを<code>Build Settings &gt; Scenes In Build</code>に突っ込みます。<br>そのあと<code>DetectTangoCore</code>というシーンを一番上に持っていき、初めにビルドされるようにします。<br>この<code>DetectTangoCore</code>シーンが他のシーンとの切り替えを行っています。</p><p><img src="..\..\..\img\tango-sample-build.jpg"></p><p>この状態で<code>Build &amp; Run</code>しましょう。<br>動くはずです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p><font size="5" color="Red">Unity2017.2では動きませんでした！！！</font><br>どうやらUnityのバージョンが新しすぎるのもよくないようです・・・<br>Unity5.5.5でビルドしましたら動きました。<br>このあたりの情報があまり見受けられないので、親切とは言い難いかもしれません。</p><p><img src="..\..\..\img\tango-menu.png"><br><img src="..\..\..\img\tango-tracking.png"></p><!--><div style="text-align: right;">引用元：[name](https://)</div><img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;..\..\..\img\tango-home.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;つい最近CEATECのお話を聞く機会があり、ARやMR（MixedReality）に力を入れている企業が多いという話をされていました。&lt;br&gt;特にGoogleとMicrosoftが
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Android" scheme="http://debugon.git.io/categories/Programming/Android/"/>
    
      <category term="Unity" scheme="http://debugon.git.io/categories/Programming/Android/Unity/"/>
    
    
      <category term="Android" scheme="http://debugon.git.io/tags/Android/"/>
    
      <category term="Unity" scheme="http://debugon.git.io/tags/Unity/"/>
    
      <category term="Tango" scheme="http://debugon.git.io/tags/Tango/"/>
    
  </entry>
  
  <entry>
    <title>Windows Subsystem for Linuxを入れてみる</title>
    <link href="http://debugon.git.io/Linux/cjbcp2mzx000bckgr7y7s6uxq/"/>
    <id>http://debugon.git.io/Linux/cjbcp2mzx000bckgr7y7s6uxq/</id>
    <published>2017-10-17T00:16:04.000Z</published>
    <updated>2017-10-23T14:28:25.916Z</updated>
    
    <content type="html"><![CDATA[<p>ついにWindows 10 Fall Creators Updateが正式リリースされ、Windows Subsystem for Linuxが提供されました。<br>InsiderPreview版では既にベータ版を利用できたのですが、リリースの時期も近かったということもあって見送ることにしていました。<br>今回はそのWindows Subsystem for Linux（以下、WSL）を実際にインストールしてみようと思います。</p><h2 id="まずは、Windows10のアップデートを"><a href="#まずは、Windows10のアップデートを" class="headerlink" title="まずは、Windows10のアップデートを"></a>まずは、Windows10のアップデートを</h2><p>早速WSLを入れたいところですが、まずはWindows10のアップデートをしなければいけません。<br>使っているPCのバージョン（ビルド）を確認しましょう。</p><p><code>Windowsの設定＞更新とセキュリティ＞Windows Update＞OSビルド情報</code>と進むことで現在使用しているPCのバージョンを確認することができます。</p><p><img src="..\..\..\img\windows_build.png"></p><p>この<code>OSビルド</code>とい番号が<code>16299</code>以上になっていることを確認してください。<br>もしそうでなければ古いバージョンが入っていますので、Winodws Updateに戻って更新しましょう。</p><h2 id="WSLの有効化"><a href="#WSLの有効化" class="headerlink" title="WSLの有効化"></a>WSLの有効化</h2><p>現在WSLはコマンドプロンプトとストア版から利用することができます。<br>しかし、それらを利用する前に<code>Windowsの機能の有効化</code>からWSLの機能を有効化し追加してあげる必要があります。</p><p><code>Windowsの設定＞アプリ＞アプリと機能＞プログラムと機能</code>から従来のプログラムの追加と削除の画面を開くことができます。</p><p><img src="..\..\..\img\program_list.png"></p><p>ここからさらに<code>Windowsの機能の有効化または無効化</code>を開いて、WSLを有効化します。</p><p><img src="..\..\..\img\windows_apps.png"></p><p>OKをクリックすると、必要なツールのインストールが始まりますので気長に待ちましょう。<br>私はそのままWSLを起動しましたが、終わったら念のために再起動を掛けたほうがいいかもしれません。</p><h2 id="ストア版Ubuntuの入手"><a href="#ストア版Ubuntuの入手" class="headerlink" title="ストア版Ubuntuの入手"></a>ストア版Ubuntuの入手</h2><p>当初bashコマンドでのインストールを知らなかったため、ストア経由でWSLをインストールしました。<br>Windowsストアを開き<code>Ubuntu</code>で検索するとカノニカル社が提供しているUbutuアプリがあると思いますので、こちらをインストールすることでUbuntu版のWSLを使用することができるようになります。<br>もしインストールできないようであれば、Windowsのバージョンが古いと思いますのでアップデートを確認してみてください。</p><p><img src="..\..\..\img\wsl_ubuntu.png"></p><h2 id="Windows-Subsystem-for-Linuxの起動"><a href="#Windows-Subsystem-for-Linuxの起動" class="headerlink" title="Windows Subsystem for Linuxの起動"></a>Windows Subsystem for Linuxの起動</h2><p>早速、インストールされたアプリを起動してみましょう。<br>設定が済んでいれば、Ubuntuのインストールを促されるはずです。<br>もしエラーメッセージが出ているようであれば、WSLの有効化が済んでいないと思われますのでもう一度見直してみてください。</p><p>Ubuntuのインストールの際に</p><ul><li>ユーザ名</li><li>パスワード</li></ul><p>を要求されますが、これは使用中のWindowsのパスワードではなく新たにUbuntuに設定するものなので同一にする必要はありません。</p><p><img src="..\..\..\img\wsl_install.png"></p><p>インストールが完了すればWSLの導入は終了となります。</p><h2 id="少し弄ってみた"><a href="#少し弄ってみた" class="headerlink" title="少し弄ってみた"></a>少し弄ってみた</h2><p><code>sudo apt update</code>でアップデートをやってみます。<br>結構アップデート対象が多くてびっくりしました。</p><p><img src="..\..\..\img\apt_update.png"></p><p>終わると<code>apt list --upgradable</code>を実行しろと言われたんで、実行して更新されたものを確認してみました。</p><p><img src="..\..\..\img\apt_list.png"></p><p>リストを見てみると最初からgccやgitなどが突っ込まれていましたが、気づかないで普通にアップデートしちゃいました・・・</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>WSLはLinuxやUNIXのようにターミナルをよく使ってる方なら非常に魅力的なのではないでしょうか。<br>私はどちらかというとUbuntu自体に興味があったところからインストールしてみようとなった口なので何とも言えませんが、いまだ勉強不足なところがありますので当分はGit Bashかなと思っています。</p><font color="White">ついにUbuntuがWindowsに入ったぜえええええええええええええええええ！！！！</font><br><font color="White">といっても、UbuntuのロゴがだいしゅきマンなのでいつかサブPCにUbuntuを突っ込んで弄りまくりたいですねー（ぶぃ</font><!--><div style="text-align: right;">引用元：[name](https://)</div><img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ついにWindows 10 Fall Creators Updateが正式リリースされ、Windows Subsystem for Linuxが提供されました。&lt;br&gt;InsiderPreview版では既にベータ版を利用できたのですが、リリースの時期も近かったということもあ
      
    
    </summary>
    
      <category term="Linux" scheme="http://debugon.git.io/categories/Linux/"/>
    
    
      <category term="WSL" scheme="http://debugon.git.io/tags/WSL/"/>
    
      <category term="Linux" scheme="http://debugon.git.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>TravisCIを利用するお話-言語編-</title>
    <link href="http://debugon.git.io/Programming/TravisCI/cjbcp2mzs000ackgres5dtp9s/"/>
    <id>http://debugon.git.io/Programming/TravisCI/cjbcp2mzs000ackgres5dtp9s/</id>
    <published>2017-09-25T15:57:49.000Z</published>
    <updated>2017-09-25T17:38:26.339Z</updated>
    
    <content type="html"><![CDATA[<p>前回はTravisCIを導入するための話でしたが、今回はそこから掘り下げて<code>lang</code>部について取り上げたいと思います。</p><h2 id="TravisCIのlang部"><a href="#TravisCIのlang部" class="headerlink" title="TravisCIのlang部"></a>TravisCIの<code>lang</code>部</h2><p>TravisCIでは<code>.yml</code>ファイルに記述する際、検査に使用する言語を<code>lang</code>部に書き記す必要があります。<br>前回はNode.jsを例に進めましたが、そのほかにも様々な言語をサポートしているので気になった方は一度見るといいかもしれません。<br><img src="..\..\..\img\travis_lang_list.png"></p><p>今回お話ししたいのは、一つの検査に複数の言語を使用する場合です。<br>「RedPenでバリバリ、検査するゾ～」なんて豪語しておきながら、躓いてしまった時のお話になります。</p><h2 id="TravisCIによる複数言語での検査"><a href="#TravisCIによる複数言語での検査" class="headerlink" title="TravisCIによる複数言語での検査"></a>TravisCIによる複数言語での検査</h2><p>ご存知の通り当ブログはHexoによって生成したファイルをGitHub.ioにアップロードして、公開しているという形式を採っています。<br>その生成元ファイルをTravisCIとRedPenでチェックし、OKであれば生成してGitHub.ioにコミットするということをしたかったのです。<br>しかしながら、Hexoはjavascriptで書かれており、RedPenはというとJAVAアプリケーションなのです。<br>当然<code>lang</code>部に<code>lang: node_js</code>と書けば「RedPenはJAVAアプリケーションだぞゴルァ！」を怒られ、<code>lang: java</code>と書けば「Node.jsってなんすかー？」とエラーを連発してしまいます。<br>その時は日本語で記載されたTipsがなかったものですこし悩みましたが、海外のフォーラムで似た環境の方がいたので参考になりました。<br>解決策としては…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lang: node_js, java</div><div class="line">node_js:</div><div class="line">  - &quot;node&quot;</div><div class="line"></div><div class="line">jdk:</div><div class="line">  - oraclejdk8</div></pre></td></tr></table></figure><p><code>lang</code>部に複数の言語をカンマで区切って記すだけでいいんですね！<br>すごい簡単でした！<br>あ！<br>使うNode.jsとJDKのバージョンの指定もお忘れなく！<br><img src="..\..\..\img\travis_lang_working.png"><br>…<br>画像ですと見づらいですが、236行目で<code>npm install</code>と511行目で<code>redpen...</code>が走っているところを見ると、ちゃんと動いていると思います。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>長い前置きの割にあっさり終わったじゃねぇーか！という方、いるかもしれません。<br>実際に私も結構躓いていた割に答えがあっさりしていて複雑な気持ちになりました。<br>もしかしたらHexoでブログ作ってみたけどRedPenで検査してみてぇっていう物好きがいるかもしれませんので、困ったときにお力になれば嬉しかったりします。</p><!--><div style="text-align: right;">引用元：[name](https://)</div><img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前回はTravisCIを導入するための話でしたが、今回はそこから掘り下げて&lt;code&gt;lang&lt;/code&gt;部について取り上げたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;TravisCIのlang部&quot;&gt;&lt;a href=&quot;#TravisCIのlang部&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="TravisCI" scheme="http://debugon.git.io/categories/Programming/TravisCI/"/>
    
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
      <category term="TravisCI" scheme="http://debugon.git.io/tags/TravisCI/"/>
    
  </entry>
  
  <entry>
    <title>TravisCIを利用するお話-導入編-</title>
    <link href="http://debugon.git.io/Programming/TravisCI/cjbcp2n02000fckgrepmmrz9a/"/>
    <id>http://debugon.git.io/Programming/TravisCI/cjbcp2n02000fckgrepmmrz9a/</id>
    <published>2017-06-14T02:32:17.000Z</published>
    <updated>2017-09-25T17:34:01.287Z</updated>
    
    <content type="html"><![CDATA[<p>3週間ぶりの投稿に見えますが、おそらく公開時にはもっと時間がたっていると思います。<br>というのも今までちょいちょい記事を書いていましたが、TravisCIに手を出してみて躓いてしまったので一旦記事にして整理しようと考えたからです。</p><h2 id="TravisCIとは"><a href="#TravisCIとは" class="headerlink" title="TravisCIとは"></a>TravisCIとは</h2><p>TravisCIとは継続的インテグレーション(CI)を行うためのツールで、CIツールのひとつとされています。<br>TravisCI以外にもいくつかのCIツールがあり、代表的なのは</p><ol><li>Jenkins</li><li>CircleCI</li><li>wercker</li></ol><p>etc…<br>無料、有償のCIツールが存在していますが、今回は比較的メジャーなTravisCIを選択することにしました。</p><h3 id="なぜ、TravisCI？？？"><a href="#なぜ、TravisCI？？？" class="headerlink" title="なぜ、TravisCI？？？"></a>なぜ、TravisCI？？？</h3><p>とてもふわっとした理由で選んだのでなんとも言えませんが、日本語の資料が多い印象を受けたからです。<br>JenkinsやCircleCIも日本語の資料が多く、CircleCIについてはRedPenでの検査環境を整えている方もいたので特に悩みました。<br>（Hexoでブログを書いておいて何をいまさらって感じもしますけれど・・・）<br>最終的には他のCIツールよりもとっつきやすそうということもあり、TravisCIにすることになりました。</p><h2 id="TravisCIの使い方"><a href="#TravisCIの使い方" class="headerlink" title="TravisCIの使い方"></a>TravisCIの使い方</h2><p>TravisCIにはGitHubのアカウントを用いてサインインすることになります。<br>というのも、TravisCIはGitHubと連携することでテスト環境を構築せずテストを行えるからです。<br>逆に言ってしまうとTravisCIを使う場合はGitHubでなければいけないことになるので、別のサイトを利用してる場合は諦めるしかありません。<br>また無料プランでは公開レポジトリのみで、プライベートレポジトリを検査対象にするには有料プランに入らなければいけません。<br>初めてサインインした際はアプリケーション連携をするかどうか問われますので、許可してくださいね。</p><h3 id="レポジトリの選択"><a href="#レポジトリの選択" class="headerlink" title="レポジトリの選択"></a>レポジトリの選択</h3><p>検査対象となるレポジトリを選択するにはGitHubアカウントでサインイン後、画面右上から<code>[ユーザー名]-&gt;Accounts</code>と選択することで選択画面を開くことができます。<br>その後は図のように案内に沿ってレポジトリを選択すれば、完了となります。<br><img src="..\..\..\img\travis_repo.png"></p><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>TravisCIではYAML形式で書かれた<code>.travis.yml</code>というファイルをルートディレクトリに配置しなければいけません。<br>CIツールを使っているor使ったことのある方ならお分かりかと思いますが、このファイルがTravisCIにおける設定ファイルになります。<br>適当に作成後、TravisCIで使用する設定を書き込みます。<br>今回は検査するための最小構成を設定したいと思います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lang: node_js</div><div class="line">node_js:</div><div class="line">  - &quot;node&quot;</div></pre></td></tr></table></figure><p>HexoはNode.jsで書かれているので<code>lang:</code>でNode.jsを選択しています。<br><code>node_js:</code>ではNode.jsのバージョンを指定できますが、<code>- &quot;node&quot;</code>とすることで最新の安定版を指定することができます。<br>以上で最小構成でTravisCIによるテストを実装することができます。</p><h3 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h3><p>TravisCIでテストするには先ほど作成した<code>.travis.yml</code>をTravisCIで指定したレポジトリの直下に配置、PushすることでTravisが<code>.travis.yml</code>を元に検査を開始します。<br>検査はTravisCI上で逐一確認できるようになっており、結果はGitHubに登録しているメールアドレスに結果が通知されるようになっています。<br>最小構成の実行結果ではありませんが、TravisCIが動作すると図のようになります。(失敗しているんですけどね・・・</p><p><img src="..\..\..\img\redpen-test-run.png"></p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はTravisCIを最小構成で実装～テストするまでを記しましたが、次回は<code>.travis.yml</code>について細かく取り上げられたらと考えております。<br>その後はRedPenを取り扱ってみたいと考えていますが、最近は他の校正ツールに乗り換えようかと思ってたりするので、まだ未定ということで。</p><font color="White">最近はノートPCが置き引きに遭い、スマホが文鎮化してしまったりと久しぶりの浦島状態を味わいました・・・</font><!--><div style="text-align: right;">引用元：[name](https://)</div><img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3週間ぶりの投稿に見えますが、おそらく公開時にはもっと時間がたっていると思います。&lt;br&gt;というのも今までちょいちょい記事を書いていましたが、TravisCIに手を出してみて躓いてしまったので一旦記事にして整理しようと考えたからです。&lt;/p&gt;
&lt;h2 id=&quot;TravisC
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="TravisCI" scheme="http://debugon.git.io/categories/Programming/TravisCI/"/>
    
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
      <category term="TravisCI" scheme="http://debugon.git.io/tags/TravisCI/"/>
    
  </entry>
  
  <entry>
    <title>Hexoで作成したブログにサイトマップを設定する話</title>
    <link href="http://debugon.git.io/Programming/Hexo/cjbcp2mzm0006ckgrb6f1rwkg/"/>
    <id>http://debugon.git.io/Programming/Hexo/cjbcp2mzm0006ckgrb6f1rwkg/</id>
    <published>2017-05-24T03:27:11.000Z</published>
    <updated>2017-05-24T07:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今回はHexoで作成したブログに<strong>サイトマップ</strong>を実装する方法を紹介します。<br>とは言えHexoでフィードの設定をする方法を調べた方なら、既にご存知かと思われます。<br>私もフィードの設定の次いでに設定した人の一人です。が、サイトマップがどういうものなのか分らないで導入したこともあり、これを機に調べてみることにしました。</p><h2 id="サイトマップとはなにか"><a href="#サイトマップとはなにか" class="headerlink" title="サイトマップとはなにか"></a>サイトマップとはなにか</h2><p>とりあえずｇｇってWikipediaを開いてみると・・・</p><blockquote><p>Sitemaps（サイトマップ）標準は、ウェブマスターがサーチエンジンに、サイト内でクロールすべきURLを教えるための方式を規定するものである。サイトマップは、当該サイトにおけるURL全てをリストした、XMLファイルとして提供し、ウェブサイト運営者は各URLに付加的情報として、最終更新日時や更新頻度、他のURLとの相対的な重要度を加えたりできる。Sitemapsに対応したサーチエンジンでは、この情報を使って、サイトのクロールをより効率的に行えるようになる。サイトマップはサーチエンジンへのURL追加規約であり、URL排除規約であるrobots.txtを補完するものである。</p><div style="text-align: right;"><br>引用元：<a href="https://ja.wikipedia.org/wiki/Sitemaps" target="_blank" rel="external">Sitemaps - Wikipedia</a><br></div></blockquote><p>などなど書いてあり正直に言うと</p><p><img src="..\..\..\img\idk.png"></p><font color="White">クロールのリンクなんて、水泳ですよこれー！</font><p><strong><em>なんてことはありませんでした。</em></strong><br>よく読んだらある程度は理解できた。（と思います、たぶん）</p><ol><li>ファイル形式はXML</li><li>URLとその他情報が記載される</li><li>Google等の検索エンジンがこれをもとに、クロールを効率的に行う</li></ol><h3 id="クロールとはなにか"><a href="#クロールとはなにか" class="headerlink" title="クロールとはなにか"></a>クロールとはなにか</h3><p>やっぱり気になるのでクロールについても調べてみました。<br>さっと引用すると</p><blockquote><p>クロールとは、検索エンジン内のシステムであるクローラ(ロボット)が一つ一つのサイトを巡回し、サイトの情報を収集することを指します</p><div style="text-align: right;"><br>引用元：<a href="https://ferret-plus.com/1061" target="_blank" rel="external">クロールとは - Webマーケティング用語｜ferret [フェレット]</a><br></div></blockquote><p>クルーラーというのがインターネット上のサイトを巡回することで、検索結果に基づいた情報が表示されるようにしているということかしら。<br>サイトマップが設定されることで、検索エンジン側がそのサイトの情報を効率よく収集できるようになるという認識でいいっぽいです。</p><p>検索結果に表示されるにはとりあえず<strong>一度はクロールされなければいけない</strong>ということなので、ブログをやってく上では非常に重要な作業ということですね。</p><h2 id="Hexoにサイトマップを設定していく"><a href="#Hexoにサイトマップを設定していく" class="headerlink" title="Hexoにサイトマップを設定していく"></a>Hexoにサイトマップを設定していく</h2><p>今回もまたHexoのプラグインでサクッと済ませていくのですが、ここで一つ問題が。<br>サイトマップ用のプラグインが<strong>公式</strong>の出しているものと、有志が<strong>作成</strong>したものがあるのでどちらか選ばなければいけません。</p><ol><li>公式：<code>hexo-generator-sitemap</code></li><li>有志：<code>hexo-generator-seo-friendly-sitemap</code></li></ol><p>公式のものは置いておいて、有志の<code>hexo-generator-seo-friendly-sitemap</code>はなんなのでしょう。</p><p>npmを覗いてみます。</p><blockquote><p>Generate SEO-friendly sitemap.<br>Inspired by XML Sitemap in Yoast Wordpress SEO Plugin (<a href="https://yoast.com" target="_blank" rel="external">https://yoast.com</a>).<br>It will generate separated sitemap files for pages, posts, categories, tags and a XSL stylesheet.</p><div style="text-align: right;"><br>引用元：<a href="https://www.npmjs.com/package/hexo-generator-seo-friendly-sitemap" target="_blank" rel="external">hexo-generator-seo-friendly-sitemap</a><br></div></blockquote><h3 id="SEOとはなにか"><a href="#SEOとはなにか" class="headerlink" title="SEOとはなにか"></a>SEOとはなにか</h3><p>分からないことは調べる！</p><font color="White">とにかく引用！サクッと行数稼げて楽だ！</font><blockquote><p>SEOとは、”Search Engine Optimization” の略であり、検索エンジン最適化を意味する言葉です。検索結果でWebサイトがより多く露出されるために行う一連の取り組みのことを指します。</p><div style="text-align: right;"><br>引用元：<a href="https://www.seohacks.net/basic/knowledge/seo/" target="_blank" rel="external">SEO（検索エンジン最適化）とは | SEO基礎知識 [SEO HACKS]</a><br></div></blockquote><p>検索エンジンの最適化とあるが、おそらくここでは「クルーラーが効率的に情報収集できるようなサイトマップ構成をするよ！」っていうプラグインかと。<br>ということでSEOにフレンドリーな<code>hexo-generator-seo-friendly-sitemap</code>をつかっていきます。</p><p>ではやっていきます。<br>npmコマンドで<code>hexo-generator-seo-friendly-sitemap</code>をインストールしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install hexo-generator-seo-friendly-sitemap --save</div></pre></td></tr></table></figure><p>うまくインストールされたのであれば、次に<code>_config.yml</code>を開いてサイトマップを設定します。<br>一番下あたりに以下のソースを追加して、サイトマップのXMLを指定してあげます。<br>ちなみにフィードと同じで、一度<strong>deployしないと生成されない</strong>かもしれません。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure><p>これで作業は終了。<br><strong><em>ね、簡単でしょ？</em></strong><br>あとはいつも通り、<code>hexo g -d</code>でdeployすれば<code>public</code>ディレクトリに<code>sitemap.xml</code>かそれっぽいのが生成されていると思われます。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>結構前にサイトマップを設定したけれど、今だGoogle検索に引っかからないです（切実<br>実際にブログをHexoで初めてみて常々感じますが、世界（特に中国）で人気なだけあってプラグインが豊富で助かっています。<br>正直、サイトマップまで設定したので次回は何を書こうか考え中です。<br>それでは！</p><font color="White">ChinaPostでオーダーしたイヤホンが発送されているということなんで、時期的にレビュー記事でもいいかなと思ってたり。</font><!--<img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今回はHexoで作成したブログに&lt;strong&gt;サイトマップ&lt;/strong&gt;を実装する方法を紹介します。&lt;br&gt;とは言えHexoでフィードの設定をする方法を調べた方なら、既にご存知かと思われます。&lt;br&gt;私もフィードの設定の次いでに設定した人の一人です。が、サイトマップが
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Hexo" scheme="http://debugon.git.io/categories/Programming/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://debugon.git.io/tags/Hexo/"/>
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>Hexoで作成したブログにフィードを設定する話</title>
    <link href="http://debugon.git.io/Programming/Hexo/cjbcp2mzo0007ckgry7x0scjk/"/>
    <id>http://debugon.git.io/Programming/Hexo/cjbcp2mzo0007ckgry7x0scjk/</id>
    <published>2017-05-18T11:53:31.000Z</published>
    <updated>2017-05-31T02:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>前回はHexoで作成したブログにテーマを設定する話をしました。<br>今回は<strong>フィード</strong>なるものをブログに設定していきたいと考えています。<br>というのも当ブログに設定しているテーマに、フィードアイコンが設置されていたためです。</p><h2 id="とりまフィードってなんぞよ"><a href="#とりまフィードってなんぞよ" class="headerlink" title="とりまフィードってなんぞよ"></a>とりまフィードってなんぞよ</h2><p>私はブログ等ウェブサイトを作成・公開したことがないので、フィードと呼ばれる存在がなんなのか知りませんでした。<br>Wikipediaによると・・・</p><blockquote><p>フィード（英: feed）とは、ウェブサイト、特にブログやニュースサイトなどのコンテンツの概要もしくはコンテンツ全体を配信用に加工した文書のこと。<br>またはそのファイルフォーマットのことをいう。<br>より明確にするためにニュースフィード、ウェブフィードと呼ぶこともある。代表的なフォーマットとしては RSS や Atom がある。<br>一般的な使い方は、ウェブサイトの作者がフィードへのリンクをサイトのどこかに置き、ユーザーがそれをアイコンなどから見つけて、自分のフィードリーダーに登録する。後はフィードリーダーがフィードの更新を定期的に確認し、ユーザーは最新のコンテンツを得ることができる。</p><div style="text-align: right;"><br>引用元：<a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89" target="_blank" rel="external">フィード - Wikipedia</a><br></div></blockquote><p>となっています。<br>ウェブサイトを配信用に加工したものを<strong>フィード</strong>、それを読者が<strong>フィードリーダー</strong>に登録しておけば更新されたときに通知される。というシステムだと考えています。</p><h3 id="数種類のフォーマットが存在する"><a href="#数種類のフォーマットが存在する" class="headerlink" title="数種類のフォーマットが存在する"></a>数種類のフォーマットが存在する</h3><p>Wikipediaでは・・・</p><blockquote><p>代表的なフォーマットとしては RSS や Atom がある。</p></blockquote><p>となっています。<br>フィードが初めての私にとってはどちらを使うか決めかねました。<br>幸いフィードリーダーには両対応のものが多いということでしたので<strong>Atom</strong>を選んでみました。</p><h2 id="Hexoで作成したブログにフィードを設定する"><a href="#Hexoで作成したブログにフィードを設定する" class="headerlink" title="Hexoで作成したブログにフィードを設定する"></a>Hexoで作成したブログにフィードを設定する</h2><p>Hexoで作成したブログにフィードを設定するのはとても簡単でした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm hexo-generator-feed --save</div></pre></td></tr></table></figure><p>npmコマンドで<code>hexo-generator-feed</code>をインストールするだけで導入は終了するそうです。<br>ただし公式リファレンスによると<code>_config.yml</code>にいろいろ書き込むことで設定できるようなので、リファレンスを参考に記入していきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">  type: atom      ##フィードの形式</div><div class="line">  path: atom.xml  ##フィードファイルへのパス</div><div class="line">  limit: 20       ##最新の何件を取得するか</div></pre></td></tr></table></figure><p><code>path:</code>はパスを指定していますが<strong>一度deployしないと生成されない</strong>ので、編集する前に<code>hexo g -d</code>をしておくことを推奨します。<br>またパスはGitHubに実際にコミットされるフォルダからの相対パスなので、だいたいは<code>path: atom.xml</code>で大丈夫かと思われます。</p><h3 id="実際に確認してみる"><a href="#実際に確認してみる" class="headerlink" title="実際に確認してみる"></a>実際に確認してみる</h3><p><img src="..\..\..\img\hexo_feed.png"></p><p>どうやらうまくいってるみたいですね。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フィードリーダーを使ったことがないのでフィードの需要があるのかわかりませんが、クリックしたらNot Found出されたので設定しました。<br>次回はサイトマップなるもについて調べて実装したいと考えています。<br>もしかしたら普通にイヤホンのレビューもとい紹介記事を書くかもしれません。</p><font color="White">AliexpressのNiceHCKというところでDZX 1+6というイヤホンをオーダーしたのですが、まだ発送連絡がこなくて怖い・・・</font><br><font color="White">インプレッションが無効についてから６週間は待ったみたいな話を聞いたので気長に待つことにします</font><!--<img src="..\..\..\img\" /><font color="White"></font>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前回はHexoで作成したブログにテーマを設定する話をしました。&lt;br&gt;今回は&lt;strong&gt;フィード&lt;/strong&gt;なるものをブログに設定していきたいと考えています。&lt;br&gt;というのも当ブログに設定しているテーマに、フィードアイコンが設置されていたためです。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Hexo" scheme="http://debugon.git.io/categories/Programming/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://debugon.git.io/tags/Hexo/"/>
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>Hexoでブログにテーマを設定する話</title>
    <link href="http://debugon.git.io/Programming/Hexo/cjbcp2mzk0005ckgry5dv5ukj/"/>
    <id>http://debugon.git.io/Programming/Hexo/cjbcp2mzk0005ckgry5dv5ukj/</id>
    <published>2017-05-09T02:42:11.000Z</published>
    <updated>2017-05-16T08:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>予告通り、Hexoで作成したブログにテーマを設定したいと思います。<br>Hexoでブログを作った方ならにお気づきになると思いますが、当ブログもデフォルトのテーマから変更しています。</p><h2 id="Hexoで作成したブログにテーマを設定する流れ"><a href="#Hexoで作成したブログにテーマを設定する流れ" class="headerlink" title="Hexoで作成したブログにテーマを設定する流れ"></a>Hexoで作成したブログにテーマを設定する流れ</h2><p>全体的な流れとしては・・・</p><ol><li>Hexoのテーマを見つける</li><li>テーマのGitレポジトリを<code>ブログ名\themes\</code>に適当にcloneする</li><li><code>_config.yml</code>の<code>theme:</code>以下をclone時の名前に変更する</li></ol><p>となります。</p><h3 id="1-Hexoのテーマを見つける"><a href="#1-Hexoのテーマを見つける" class="headerlink" title="1. Hexoのテーマを見つける"></a>1. Hexoのテーマを見つける</h3><p>Hexoのテーマは<a href="https://hexo.io/themes/" target="_blank" rel="external">公式サイト</a>かGitHubか何かで「Hexo-theme」と検索すれば探せます。<br>公式サイトはサムネイルが表示されるのでデフォルトテーマからとりあえず変えたいという場合には最適かと思います。</p><p><img src="..\..\..\img\hexo_theme.png"></p><p>今回は<a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external">こちら</a>のLightテーマを使います。</p><p><img src="..\..\..\img\hexo_theme_light.png"></p><h3 id="2-テーマをcloneする"><a href="#2-テーマをcloneする" class="headerlink" title="2. テーマをcloneする"></a>2. テーマをcloneする</h3><p>欲しいテーマを見つけたら、以下のコマンドでローカルの<code>ブログ名\themes\</code>にcloneします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git clone https://github.com/hexojs/hexo-theme-light.git themes\light</div></pre></td></tr></table></figure><p>うまくいけば<code>ブログ名\themes\</code>に<code>light</code>というディレクトリが生成されているはずです。</p><h3 id="3-config-ymlに設定する"><a href="#3-config-ymlに設定する" class="headerlink" title="3. _config.ymlに設定する"></a>3. <code>_config.yml</code>に設定する</h3><p>最後に<code>_config.yml</code>にテーマを設定して終わりです。<br>以下のように<code>_congig.yml</code>を開いて、該当箇所を変更します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: light</div></pre></td></tr></table></figure><p>deployする前に<code>hexo server</code>で確認して、良ければ<code>hexo generate -d</code>でブログを更新してください。</p><h3 id="EX-テーマのデザインが崩れてしまう時"><a href="#EX-テーマのデザインが崩れてしまう時" class="headerlink" title="EX. テーマのデザインが崩れてしまう時"></a>EX. テーマのデザインが崩れてしまう時</h3><p>テーマをいろいろ試している際に躓いた部分があります。<br>テーマにjadeとsassが使われている場合、サイトのデザインが崩れてしまうようです。<br>専用のプラグインが用意されているので、以下のコマンドでインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$npm install hexo-renderer-jade --save</div><div class="line">$npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure><p>こうしたプラグインは各テーマの導入方法の部分に記載されていると思いますので、入れたいテーマに合わせてインストールしてください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Hexoの導入までされた方ならテーマの変更は容易かと思います。<br>前回の記事でも触れましたがHexoは利用者が多い分、テーマの種類も豊富なのが売りの一つではないでしょうか。<br>次回はフィードの設定について取り扱いたいと考えています。</p><font color="White">前回まではBracketsでmdの編集してたけど、Atomに移行してみました。</font><br><font color="White">ってプラグインでコマンドライン開けたり、スペルチェックできたり、カラーコード出せたり、最高じゃないですかー</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;予告通り、Hexoで作成したブログにテーマを設定したいと思います。&lt;br&gt;Hexoでブログを作った方ならにお気づきになると思いますが、当ブログもデフォルトのテーマから変更しています。&lt;/p&gt;
&lt;h2 id=&quot;Hexoで作成したブログにテーマを設定する流れ&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Hexo" scheme="http://debugon.git.io/categories/Programming/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://debugon.git.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://debugon.git.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://debugon.git.io/tags/GitHub/"/>
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>GitHub PagesとHexoで作る静的サイトブログ</title>
    <link href="http://debugon.git.io/Programming/Hexo/cjbcp2mzc0001ckgridg7epoh/"/>
    <id>http://debugon.git.io/Programming/Hexo/cjbcp2mzc0001ckgridg7epoh/</id>
    <published>2017-04-27T10:39:12.000Z</published>
    <updated>2017-05-16T08:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>今回は本ブログを立ち上げるためにGitとHexoについて学びましたので忘れないうちに書いておこうと思います。<br>GitHub PagesとHexoを用いてブログを作るところまで行こうと考えていますが、長くなりそうであれば別の記事に分けると思います。</p><h2 id="Hexoとは"><a href="#Hexoとは" class="headerlink" title="Hexoとは"></a>Hexoとは</h2><p>Hexoとは前回の記事でも触れましたが、<strong>静的サイトジェネレータ</strong>の一つです。<br>静的サイトジェネレータを用いることで静的ファイル(html、css、javascript)で叩き出してくれる代物で、その中でもHexoはブログに特化していると言われています。<br>私は<strong>ヘキオ</strong>と呼んでますが<strong>ヘクソ</strong>や<strong>ヘキソ</strong>とも呼ばれているようです。<br>使うには<strong>node.js</strong>でインストールし、コマンドラインで記事の作成やGitを使ってブログをサーバーにデプロイすることになります。</p><h2 id="Hexoを使ってみる"><a href="#Hexoを使ってみる" class="headerlink" title="Hexoを使ってみる"></a>Hexoを使ってみる</h2><ul><li>必須環境  <ul><li>Node.js</li><li>Git</li></ul></li></ul><p>上記を使用しますのでインストールしておいてください。</p><p>まずHexoをインストールするので、<strong>コマンドライン</strong>(コマンドプロンプトやgit bashなど)上で</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm install hexo-cli -g</div></pre></td></tr></table></figure><p>と入力し実行してください。<br>間違ってなければパッケージがグローバル領域にインストールされますので、Hexoのコマンドが使用できるようになります。<br>次に下記のコマンドを実行し、ベースとなるサイトを作成して動かします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$hexo init ブログ名</div><div class="line">$cd ブログ名</div><div class="line">$npm install</div><div class="line">$hexo server</div></pre></td></tr></table></figure><p>実行してみるとlocalhost:4000に作成したブログを見ることができます。<br>ただし現段階ではまだテーマを導入していないので、宇宙を背景にブログ名が表示されているだけだと思います。<br>このままでは寂しいので新しい記事を追加してみましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$hexo new 記事名</div></pre></td></tr></table></figure><p>こちらのコマンドで記事が<code>ブログ名\source\_post\記事名.md</code>といった形で生成されます。<br>しかしファイル名に日本語を用いるのはいろいろとアウトなのでできれば<strong>英語で生成する</strong>のが望ましいです。(本記事は<code>hexo-setup.md</code>で作っています)<br>生成されたファイルを開くと・・・</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 記事名</div><div class="line">date: YYYY-MM-DD HH:mm:ss</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure><p>となっていますので、<code>title</code>を適宜編集してください。<br>また、本文は下の空欄部分(- - -、以下)に<strong>マークダウン</strong>で記入していくことになります。<br>書き終わったら保存して<code>hexo server</code>で先ほど同様、localhost:4000で確認できます。<br>書き始める前に実行しておけば、プレビューしながら編集することもできるのでオススメです。</p><p>それでは最後に<strong>GitHub Pages</strong>で公開する手順を説明します。</p><h2 id="GitHub-Pagesで公開する"><a href="#GitHub-Pagesで公開する" class="headerlink" title="GitHub Pagesで公開する"></a>GitHub Pagesで公開する</h2><p>Github Pagesで公開するにはまずGitHubに専用のレポジトリを作成。<br>そのレポジトリにHexoでデプロイするといった流れになります。</p><p>さくっと<code>ユーザー名.github.io</code>という名前のレポジトリをGitHubに作ります。<br>この時に<strong>README.mdを追加しない</strong>ほうが、すぐに<strong>https</strong>か<strong>ssh</strong>をコピーできますのでオススメです。(作ってしまった場合は<code>clone or download</code>から見ることができます)<br>作成できたら<code>ブログ名\_config.yml</code>を開いて、対象の部分を以下のように修正・追加します。<br>ソースまるまる載せるわけにもいかないので、<strong>変更部分のみ抜粋</strong>しています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: ブログ名</div><div class="line">language: en</div><div class="line">timezone: Asia/Tokyo</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://ユーザー名.git.io</div><div class="line">root: /</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:ユーザー名/ユーザー名.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p><code>language: en</code>にしているのはHexoのテーマの大体が日本語に対応していないからです。<br>デフォルトで中国語に設定されているテーマですとブログが漢字だらけになってしまうので、英語を選択しています。<br><code>repo:</code>以下は先ほど作ったレポジトリの<strong>https</strong>か<strong>ssh</strong>を入力してください。<br>Hexo 3.x系からは<code>type:</code>で<strong>github</strong>ではなく<strong>git</strong>を選択しているので注意してください。<br>変更が終わったら上書き保存して、コマンドラインに戻ってください。</p><p>次にHexoにサービスにGitをデプロイするためのプラグインをインストールして、実際にGitHub上に作ったサイトを公開します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$npm install hexo-deployer-git --save</div><div class="line">$git init</div><div class="line">$git remote add origin &#123;https or ssh&#125;</div><div class="line">$hexo generate</div><div class="line">$hexo deploy</div></pre></td></tr></table></figure><p>うまくいけば、これで<code>ユーザー名.github.io</code>上でブログを見ることができるようになっています。<br>ここで躓きやすいのが<strong><code>$git init</code>していない</strong>、<strong>PCでsshを設定していない</strong>などが挙げられます。(実際にsshを設定していなくてhttpsで公開する羽目に・・・)<br>またHexoのコマンドは大体は以下のように<strong>省略</strong>でき、ブログの更新する際は一行で済ませることができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$hexo g -d</div></pre></td></tr></table></figure><p>この一行で<code>$hexo generate</code>と<code>$hexo deploy</code>をしています。<br>他にもローカルで建てる時の<code>hexo server</code>が<code>hexo s</code>に略せたりできたので、気になる方は公式のドキュメントを覗いてみると良いかもしれません。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>次の更新は<strong>テーマの変更</strong>についてやりたいと考えています。<br>また<code>_config.yml</code>についても触れられたらいいかと思っていますので、よろしくお願いします。</p><font color="White">ブログ名もしっくりこないし、Hexoを弄りきれていないから当分はHexoの話題になりますね。</font><br><font color="White">というか記事書いていたら零時すぎてしまったんじゃが・・・</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今回は本ブログを立ち上げるためにGitとHexoについて学びましたので忘れないうちに書いておこうと思います。&lt;br&gt;GitHub PagesとHexoを用いてブログを作るところまで行こうと考えていますが、長くなりそうであれば別の記事に分けると思います。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Programming" scheme="http://debugon.git.io/categories/Programming/"/>
    
      <category term="Hexo" scheme="http://debugon.git.io/categories/Programming/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://debugon.git.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://debugon.git.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://debugon.git.io/tags/GitHub/"/>
    
      <category term="Markdown" scheme="http://debugon.git.io/tags/Markdown/"/>
    
      <category term="YAML" scheme="http://debugon.git.io/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>GitHub + Hexo でブログを立ててみたお話</title>
    <link href="http://debugon.git.io/Blog/cjbcp2mze0002ckgrzee47t8i/"/>
    <id>http://debugon.git.io/Blog/cjbcp2mze0002ckgrzee47t8i/</id>
    <published>2017-04-24T18:41:14.000Z</published>
    <updated>2017-05-16T08:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-PagesとHexoを使ってブログを立ててみた"><a href="#Github-PagesとHexoを使ってブログを立ててみた" class="headerlink" title="Github PagesとHexoを使ってブログを立ててみた"></a>Github PagesとHexoを使ってブログを立ててみた</h1><p>初めまして、でぶごんです。<br>マークダウンによる記述はちょっと慣れていないので、今回は挨拶程度で勘弁してください。</p><p>ブログを立てることになったのですが、<strong>はてなブログ</strong>や<strong>Qiita</strong>、<strong>WordPress</strong>等、色々あると思ます。<br>正直立てた今でもはてなブログで妥協しておけばよかったのではと思っていますが、Hexoで作ったページをGitHub Pages（以下GitHub）で公開するという形にしました。  </p><p>GitHubにデータ管理出来たらSlackで通知やらなんやらできるんじゃね？という考えで調べてみたところ、<br><strong>静的サイトジェネレータ</strong>なるものでGitHubに公開できるということが分かったのがきっかけでした。<br>この静的サイトジェネレータを用いることで静的ファイル（html, js, css）として叩き出すことができ、GitHubで公開できるということです。<br>将来的にはSlcakで記事の更新（デプロイ）を通知として受けれたり、文章チェッカーなんかもあるようなので使えたらいいなと考えてます。<br>詳しい話は後日、ちゃんとした記事でまとめたいと考えています。<br>（一応テストも兼ねているからそんなに多い量のテキストは書きたくないのじゃ）  </p><p>最後だけそれっぽいことを書くと<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo init &#123;blogName&#125;</div><div class="line">cd &#123;blogName&#125;/public</div><div class="line">git init</div><div class="line">git add --all</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git remote add origin &#123;ssh&#125;</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p><p>上記は生成された{blogName}ディレクトリ内のpublicをcommitしてmasterにpushしてるので、完全に<code>hexo deploy</code>が死んでますねー・・・</p><p>おわり</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github-PagesとHexoを使ってブログを立ててみた&quot;&gt;&lt;a href=&quot;#Github-PagesとHexoを使ってブログを立ててみた&quot; class=&quot;headerlink&quot; title=&quot;Github PagesとHexoを使ってブログを立ててみた&quot;&gt;
      
    
    </summary>
    
      <category term="Blog" scheme="http://debugon.git.io/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://debugon.git.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://debugon.git.io/tags/Blog/"/>
    
  </entry>
  
</feed>
